{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Instrucciones\n",
        "El archivo _melate.csv_ contiene los datos de la bolsa acumulada del concurso Melate desde el primero de enero de 1995, concurso que se celebra todos los miércoles, viernes y domingo.  \n",
        "Si un día no hubo concurso, estará marcado en el archivo como un par de comillas dobles.  \n",
        "Si nadie gana el concurso, se acumulan las ganancias para el siguiente sorteo.  \n",
        "Si alguien gana el sorteo, la siguiente fecha inicia con una bolsa mínima, que para sorteos seguidos suele ser la misma.\n",
        "\n",
        "1. Importa el archivo desde [https://raw.githubusercontent.com/DRMiguelAR/Herramientas_Analisis/master/melate.csv](https://raw.githubusercontent.com/DRMiguelAR/Herramientas_Analisis/master/melate.csv)  \n",
        "1. Abre el archivo y convierte la serie de datos a una Serie de pandas.\n",
        "1. Genera una serie con todos lo miércoles, viernes y domingos a partir del primero de enero de 1995 hasta el 28 de septiembre de 2022.  \n",
        "1. Agrega esta serie de fechas como índice a las bolsas del melate.\n",
        "1. Encuentra cuántos valores vacíos y cuantos valores válidos tiene la serie.\n",
        "1. Filtra los valores vacíos de la serie, para sólo quedarte con los valores válidos\n",
        "1. Encuentra algunas estadísticas de la serie, para cada una, genera un campo en el que describas qué significa el resultado obtenido.\n",
        "\n",
        ">> count, min, max, argmin, argmax, idxmin, idxmax, quantile, sum, mean, median, mode, var, std, skew, kurt, cumsum, cummin, cummax, diff, pct_change, histogram, describe\n",
        "\n",
        "8. Contesta las siguientes preguntas:  \n",
        "    a. ¿Cuál es la mayor cantidad de sorteos que han pasado sin obtener un ganador?  \n",
        "    b. ¿Cuál es la vez en que ha habido ganadores de melate más próximos?\n"
      ],
      "metadata": {
        "id": "zSzze_BaymYP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 8.a"
      ],
      "metadata": {
        "id": "ZCmTUPDPHBTZ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 116,
      "metadata": {
        "id": "7PBBzs96vRaG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9c6d4f4c-be4f-4f2b-f6d3-ed106b870548"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2023-11-10 02:13:39--  https://raw.githubusercontent.com/DRMiguelAR/Herramientas_Analisis/master/melate.csv\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 36503 (36K) [text/plain]\n",
            "Saving to: ‘melate.csv.4’\n",
            "\n",
            "\rmelate.csv.4          0%[                    ]       0  --.-KB/s               \rmelate.csv.4        100%[===================>]  35.65K  --.-KB/s    in 0.006s  \n",
            "\n",
            "2023-11-10 02:13:39 (6.24 MB/s) - ‘melate.csv.4’ saved [36503/36503]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from pandas import Series, DataFrame\n",
        "\n",
        "!wget https://raw.githubusercontent.com/DRMiguelAR/Herramientas_Analisis/master/melate.csv\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1= pd.read_csv(\"melate.csv\", header=None)[0]\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ixW-_90L-hgm",
        "outputId": "e26df982-aa8e-42a2-dc91-137236ea58e6"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         3000000.0\n",
              "1         3800000.0\n",
              "2               NaN\n",
              "3         2000000.0\n",
              "4         2200000.0\n",
              "           ...     \n",
              "4338    358900000.0\n",
              "4339    361000000.0\n",
              "4340    365000000.0\n",
              "4341    368800000.0\n",
              "4342    371600000.0\n",
              "Name: 0, Length: 4343, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.bdate_range(start=\"01/01/1995\", end=\"09/28/2022\", freq=\"M\") #weekly"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zhsrs9JL-7C1",
        "outputId": "e041357d-4b4d-45a5-c61d-67bffa3cb2fb"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['1995-01-31', '1995-02-28', '1995-03-31', '1995-04-30',\n",
              "               '1995-05-31', '1995-06-30', '1995-07-31', '1995-08-31',\n",
              "               '1995-09-30', '1995-10-31',\n",
              "               ...\n",
              "               '2021-11-30', '2021-12-31', '2022-01-31', '2022-02-28',\n",
              "               '2022-03-31', '2022-04-30', '2022-05-31', '2022-06-30',\n",
              "               '2022-07-31', '2022-08-31'],\n",
              "              dtype='datetime64[ns]', length=332, freq='M')"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Punto tres\n",
        "len(pd.bdate_range(start='01/01/1995', end='09/28/2022', freq='D'))\n",
        "\n",
        "#mascara\n",
        "mask = [True, False, False, True, False, True, False]*(10133//7)+ [True, False, False, True]\n",
        "fechas = pd.bdate_range(start='01/01/1995', end='09/28/2022', freq='D')[mask]"
      ],
      "metadata": {
        "id": "wVTk8ygt__ZJ"
      },
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(s1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tr9ZJUh6A88O",
        "outputId": "f16b75bf-c2e2-4167-ec1d-91a2fde907dc"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4343"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1.index=fechas\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4hEtfuO8B7SV",
        "outputId": "c5c683b2-ae57-460f-de79-b16667df8ed2"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1995-01-01      3000000.0\n",
              "1995-01-04      3800000.0\n",
              "1995-01-06            NaN\n",
              "1995-01-08      2000000.0\n",
              "1995-01-11      2200000.0\n",
              "                 ...     \n",
              "2022-09-18    358900000.0\n",
              "2022-09-21    361000000.0\n",
              "2022-09-23    365000000.0\n",
              "2022-09-25    368800000.0\n",
              "2022-09-28    371600000.0\n",
              "Name: 0, Length: 4343, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.bdate_range(start='01/01/1995', end='09/28/2022', freq='C', weekmask=\"Sun Wed Fri\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N1lsgeTWCBBv",
        "outputId": "d6488944-3421-4a62-c9c1-36de2e5beb18"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['1995-01-01', '1995-01-04', '1995-01-06', '1995-01-08',\n",
              "               '1995-01-11', '1995-01-13', '1995-01-15', '1995-01-18',\n",
              "               '1995-01-20', '1995-01-22',\n",
              "               ...\n",
              "               '2022-09-07', '2022-09-09', '2022-09-11', '2022-09-14',\n",
              "               '2022-09-16', '2022-09-18', '2022-09-21', '2022-09-23',\n",
              "               '2022-09-25', '2022-09-28'],\n",
              "              dtype='datetime64[ns]', length=4343, freq='C')"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1[s1.isna()] #que pertenecen"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dkuExBccCgIm",
        "outputId": "6a902b2c-4d26-41aa-f36d-3cd090b52455"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1995-01-06   NaN\n",
              "1995-01-13   NaN\n",
              "1995-01-20   NaN\n",
              "1995-01-27   NaN\n",
              "1995-02-03   NaN\n",
              "              ..\n",
              "2021-10-22   NaN\n",
              "2021-10-29   NaN\n",
              "2021-11-05   NaN\n",
              "2021-11-12   NaN\n",
              "2021-11-19   NaN\n",
              "Name: 0, Length: 1437, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "concursos=s1[s1.notna()] #que no pertenecen\n",
        "concursos.count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h8Vtj5prDBn2",
        "outputId": "0565fb8d-258a-45b3-9ea2-6ef87b2b0b9e"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2906"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(concursos.max())\n",
        "print(concursos.argmax()) #en que posición\n",
        "print(concursos.idxmax()) #en que fecha max\n",
        "print(concursos.idxmin()) #fecha min"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cqTcBt6ADCp5",
        "outputId": "071a6b27-a916-4766-cce3-9beeef7fa68d"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "639500000.0\n",
            "1937\n",
            "2013-07-31 00:00:00\n",
            "2006-12-27 00:00:00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "concursos.quantile(.5) #50% son 34000000"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ccYrZduDo7W",
        "outputId": "a489851a-4b9d-4f06-8f1f-5590da37b1e4"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "34000000.0"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "concursos.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4gZnWAmcE2NM",
        "outputId": "9157ff23-dd24-4aff-d0c8-4883c6b1387c"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    2.906000e+03\n",
              "mean     8.004120e+07\n",
              "std      1.033403e+08\n",
              "min      0.000000e+00\n",
              "25%      1.300000e+07\n",
              "50%      3.400000e+07\n",
              "75%      1.060000e+08\n",
              "max      6.395000e+08\n",
              "Name: 0, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Diferencias cuando no se ha ganado\n",
        "#las fechas muestran que en la primera se gano, paso un mes y otro, y luego dos meses...\n",
        "#diferencias=concursos.diff()\n",
        "#diferencias[diferencias<0]"
      ],
      "metadata": {
        "id": "IwwZs6ZqE-XO"
      },
      "execution_count": 128,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Días máximos sin ganar\n",
        "diferencias = concursos.diff()\n",
        "fechas_ganadoras= Series(diferencias[diferencias<0].index)\n",
        "fechas_ganadoras.diff().max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sILARSReFr3u",
        "outputId": "38c465a8-bc3b-4d32-d0ca-dfb5446fcb29"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timedelta('430 days 00:00:00')"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Fechas máximas sin ganar\n",
        "diferencias = concursos.diff()\n",
        "fechas_ganadoras= Series(diferencias[diferencias<0].index)\n",
        "print(fechas_ganadoras.diff())\n",
        "fechas_ganadoras.diff().max"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FEmYOq_HGsdu",
        "outputId": "019d0cd5-5472-42d3-9bb9-86aedf18d2ed"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0          NaT\n",
            "1      31 days\n",
            "2      53 days\n",
            "3      14 days\n",
            "4      14 days\n",
            "        ...   \n",
            "240   430 days\n",
            "241    21 days\n",
            "242    77 days\n",
            "243   119 days\n",
            "244   137 days\n",
            "Length: 245, dtype: timedelta64[ns]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame._add_numeric_operations.<locals>.max of 0          NaT\n",
              "1      31 days\n",
              "2      53 days\n",
              "3      14 days\n",
              "4      14 days\n",
              "        ...   \n",
              "240   430 days\n",
              "241    21 days\n",
              "242    77 days\n",
              "243   119 days\n",
              "244   137 days\n",
              "Length: 245, dtype: timedelta64[ns]>"
            ]
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#cuantos sorteos han pasado sin obtener un ganador\n",
        "\n",
        "# Días máximos sin ganar\n",
        "diferencias = concursos.diff()\n",
        "fechas_ganadoras = pd.Series(diferencias[diferencias < 0].index)\n",
        "\n",
        "# Cuántos sorteos han pasado sin obtener un ganador\n",
        "cantidad_sorteos_sin_ganador = len(fechas_ganadoras) + 1\n",
        "\n",
        "print(cantidad_sorteos_sin_ganador)"
      ],
      "metadata": {
        "id": "5sX8jx6JHSlp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "063a8a3b-afe8-47a4-a975-0ba2f5a90441"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "246\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 8.b"
      ],
      "metadata": {
        "id": "Ca20ORlSHEr9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Veces en que ha habido ganadores de melate más próximos\n",
        "print(concursos)"
      ],
      "metadata": {
        "id": "34WGj6rJEIYp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4121c45b-1300-4677-e761-ba85d796e3ee"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1995-01-01      3000000.0\n",
            "1995-01-04      3800000.0\n",
            "1995-01-08      2000000.0\n",
            "1995-01-11      2200000.0\n",
            "1995-01-15      2500000.0\n",
            "                 ...     \n",
            "2022-09-18    358900000.0\n",
            "2022-09-21    361000000.0\n",
            "2022-09-23    365000000.0\n",
            "2022-09-25    368800000.0\n",
            "2022-09-28    371600000.0\n",
            "Name: 0, Length: 2906, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convertir la serie a fechas entendibles\n",
        "\n",
        "# Convertir la serie a fechas entendibles\n",
        "concursos.index = pd.to_datetime(concursos.index)\n",
        "\n",
        "# Calcular la diferencia entre fechas consecutivas\n",
        "diferencias_fechas = concursos.index.to_series().diff().dt.days.dropna()\n",
        "\n",
        "# Calcular las medidas estadísticas\n",
        "skewness = diferencias_fechas.skew()\n",
        "kurt = diferencias_fechas.kurtosis()\n",
        "cumulative_sum = diferencias_fechas.cumsum()\n",
        "\n",
        "# Encontrar la ocasión en que ha habido ganadores más próximos\n",
        "ocasion_mas_proxima = diferencias_fechas.idxmin()\n",
        "diferencia_minima = diferencias_fechas.min()\n",
        "\n",
        "# Imprimir el resultado\n",
        "print(f\"Skewness: {skewness}\")\n",
        "print(f\"Kurtosis: {kurt}\")\n",
        "print(f\"Cumulative Sum: {cumulative_sum}\")\n",
        "print(f\"Ha habido ganadores de Melate separados por {diferencia_minima} sorteos.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-YWk_5Ox-5lW",
        "outputId": "707e1d2c-dfc8-40a7-e0d0-0ca0e015db2c"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Skewness: 48.51811075173242\n",
            "Kurtosis: 2525.0108681400343\n",
            "Cumulative Sum: 1995-01-04        3.0\n",
            "1995-01-08        7.0\n",
            "1995-01-11       10.0\n",
            "1995-01-15       14.0\n",
            "1995-01-18       17.0\n",
            "               ...   \n",
            "2022-09-18    10122.0\n",
            "2022-09-21    10125.0\n",
            "2022-09-23    10127.0\n",
            "2022-09-25    10129.0\n",
            "2022-09-28    10132.0\n",
            "Length: 2905, dtype: float64\n",
            "Ha habido ganadores de Melate separados por 2.0 sorteos.\n"
          ]
        }
      ]
    }
  ]
}